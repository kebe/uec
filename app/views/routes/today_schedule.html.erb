<div id="locations">
  <login v-if="token == ''"></login>
  <route v-else>Logged In</route>
</div>

<script type="text/x-template" id="route-template">
<div>
  <%= image_tag('/logo_v2.jpg', :style => "float:left;margin-left:20px;") %> 
  <h1 align="center"><i class="material-icons" style="font-size:2.9rem">drive_eta</i> {{ route.name }} Route</h1>
  <hr />

  <ul id="slide-out" class="side-nav">
    <li><div><%= image_tag('/logo_v2.jpg', :style => "margin-top:20px;margin-left:20px;") %></div> </li>
    <li><a href="#!"><i class="material-icons">person</i>Driver: {{driver.first_name}} {{driver.last_name}}</a></li>
    <li><%= link_to "Logout", destroy_driver_session_path, :method => :delete %></li>
    <li><div class="divider"></div></li>
    <li><a class="subheader">My Routes</a></li>
    <ul>
      <li v-for="client_route in driver.routes"><a class="waves-effect" :href="'/routes/'+client_route.id+'/today_schedule'">{{client_route.name}}</a></li>
    </ul>
    
  </ul>
  <a href="#" data-activates="slide-out" class="button-collapse"><i class="material-icons large">menu</i></a>

  <ul class="collapsible popout" data-collapsible="accordion">
    <li v-for="client in clients">
      <div class="collapsible-header"><i class="material-icons"></i><h1><strong>{{ client.first_name }} {{ client.last_name }}</strong></h1> <h5><i class="material-icons" style="font-size:2.5rem">location_on</i> <strong>{{ client.address }}</strong></h5></div>
      <div class="collapsible-body">
        <span style="padding-right:100px"><a :id="'pu-'+client.id" class="waves-effect waves-light btn-large" v-on:click="open_pickup_modal($event)">Pickup</a></span>
        <span><a :id="'do-'+client.id" class="waves-effect waves-light btn-large" v-on:click="open_dropoff_modal($event)">Dropoff</a></span>
          <table class="striped" style="font-size: 1.5em;">
            <thead>
              <tr>
                  <th>Type</th>
                  <th>Status</th>
                  <th>Time</th>
                  <th>Wheelchair</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="operation in client.operations">
                <td>{{operation.op_type}}</td>
                <td>{{operation.status}}</td>
                <td>{{operation.time  }}</td>
                <td>{{operation.wheelchair}}</td>
              </tr>
            </tbody>
          </table>
      </div>  
    </li>
  </ul>

  <div id="pickup-modal" class="modal">
    <div class="modal-content">
      <span><button class="waves-effect waves-light btn-large" v-on:click="client_status('pickup', 'present', $event)">Present</button></span>
      <span><button class="waves-effect waves-light btn-large" v-on:click="client_status('pickup', 'not-present', $event)">Not Present</button></span>
      <span><button class="waves-effect waves-light btn-large" v-on:click="client_status('pickup', 'no-show', $event)">No Show</button></span>
    </div>
  </div>

  <div id="dropoff-modal" class="modal">
    <div class="modal-content">
      <span style="padding-right:100px"><button class="waves-effect waves-light btn-large" v-on:click="client_status('dropoff', 'present', $event)">Present</button></span>
      <span style="padding-right:100px"><button class="waves-effect waves-light btn-large" v-on:click="client_status('dropoff', 'not-present', $event)">Not Present</button></span>
      <span><button class="waves-effect waves-light btn-large" v-on:click="client_status('dropoff', 'no-show', $event)">No Show</button></span>
    </div>
  </div>
</div>

</script>





<script type="text/x-template" id="login-template">
<form>
<input v-model="email" placeholder="Email">
<input v-model="password" type="password" placeholder="Password">
<button v-on:click="submit">Login</button>
</form>
</script>

<script>

var state = {
  token: "<%= JWTWrapper.encode({ driver_id: current_driver.id }) if current_driver %>",
  driver_id: "<%= current_driver.id %>",
  route_id: "<%= @route.try(:id) %>"
};
Vue.component("route", {
  template: "#route-template",
  data: function() {
    return {route: {}, clients: null, driver: {}};
  },
  created: function() {
    this.fetchData();
  },
  methods: {
    open_pickup_modal: function(client_id) {
      targetId = event.currentTarget.id.split('-')[1]; //expecting id with format xx-id
      console.log(targetId); 

      $('#pickup-modal div').attr("id", 'pu-modal-'+targetId);
      $('#pickup-modal').modal('open');
    },
    open_dropoff_modal: function(client_id) {
      targetId = event.currentTarget.id.split('-')[1]; //expecting id with format xx-id
      console.log(targetId); 

      $('#dropoff-modal div').attr("id", 'do-modal-'+targetId);
      $('#dropoff-modal').modal('open');
    },
    fetchData: function() {
      var self = this;
      $.ajax({
        url: "/api/v1/route/" + state.route_id,
        beforeSend: function(xhr) { xhr.setRequestHeader("Authorization", "Bearer " + state.token); },
        success: function(response) {
          console.log(response);
          self.route = response;
          self.clients = response.clients;
          self.driver = response.driver;
          console.log(response.driver);
        }
      });
    },
    client_status: function ( type, status, event) {
      targetId = event.currentTarget.parentElement.parentElement.id.split('-')[2]
      //alert( type + ' Client is ' + status + '!')
      var self = this;
      $.ajax({
        url: "/api/v1/create_operation",
        type: "POST",
        data: {op_type: type, status: status, driver_id: state.driver_id, client_id: targetId, wheelchair: true, helper: "mike" } ,
        beforeSend: function(xhr) { xhr.setRequestHeader("Authorization", "Bearer " + state.token); },
        success: function(response) {
          console.log("operation is a success");
        }
      });

      $('#'+ type + '-modal').modal('close');  
      this.fetchData(); 
    }
  },

  filters: {
    time_format: function(value){
      return //moment(String(value)).format('hh:mm')
    }
  }
});
Vue.component("login", {
  template: "#login-template",
  data: function() {
    return {
      email: "chris@gorails.com",
      password: "password"
    };
  },
  methods: {
    submit: function(event) {
      event.preventDefault();
      $.post("/api/v1/user_token", {auth: {email: this.email, password: this.password}}, function(data) {
        localStorage.setItem("token", data.jwt);
        state.token = data.jwt;
      })
    }
  }
})
new Vue({
  el: "#locations",
  data: state
})
</script>





